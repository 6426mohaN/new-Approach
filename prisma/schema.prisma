// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  quizzes     Quiz[]
  Certificate Certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)

  isFree Boolean @default(false)

  muxData  MuxData?
  courseId String
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([courseId])
}

// model Quiz {
//   id           String     @id @default(uuid())
//   courseId     String     @unique
//   title        String
//   description  String?
//   position     Int
//   cooldownDays Int // Number of days before a retry is allowed
//   timerMinutes Int // Time limit for the quiz in minutes
//   isPublished  Boolean    @default(false) // Prevents modification after publishing
//   course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
//   questions    Question[]
//   createdAt    DateTime   @default(now())

//   UserQuizResult UserQuizResult[]

//   @@index([courseId])
// }
model Quiz {
  id       Int    @id @default(autoincrement())
  title    String
  question String
  options  Json // Use JSON type to store the options array

  correctIndex Int
  createdAt    DateTime @default(now())
  courseId     String // Add this field to reference the Course
  course       Course   @relation(fields: [courseId], references: [id])

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id          String  @id @default(uuid())
  userId      String
  chapterId   String
  chapter     Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  StripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id        Int      @id @default(autoincrement())
  userId    String // ID of the user who earned the certificate
  courseId  String // ID of the course for which the certificate was earned
  qrCodeUrl String? // URL of the QR code for this certificate (optional)
  issuedAt  DateTime @default(now()) // Timestamp of when the certificate was issued

  // user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId]) // Ensure a user can only have one certificate per course
  @@index([courseId])
}

// model Question {
//   id       String   @id @default(cuid())
//   question String
//   text     String
//   options  Json // Array of options
//   answer   String // Correct answer
//   quiz     Quiz     @relation(fields: [quizId], references: [id])
//   quizId   String
//   Option   Option[]

//   @@index([quizId])
// }

// model Option {
//   id         String   @id @default(cuid())
//   text       String
//   questionId String
//   question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

//   @@index([questionId])
// }

// model UserQuizResult {
//   id               String    @id @default(uuid())
//   userId           String
//   quizId           String
//   quiz             Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
//   score            Float
//   retryCount       Int       @default(0)
//   lastAttempt      DateTime?
//   completedAt      DateTime?
//   incorrectAnswers Json?

//   @@index([quizId])
// }
